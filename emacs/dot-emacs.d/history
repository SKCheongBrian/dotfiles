;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(setenv-history read-envvar-name-history ef-themes--select-theme-history command-history grep-find-history xref--read-identifier-history read-expression-history buffer-name-history eglot-command-history yes-or-no-p-history file-name-history minibuffer-history extended-command-history))
(setq setenv-history '("/bin/zsh" "/bin/bash"))
(setq read-envvar-name-history '("SHELL"))
(setq ef-themes--select-theme-history '("ef-bio"))
(setq command-history '((find-file "~/school/mods/CS6215/notes/project/dd.org" t) (execute-extended-command nil "setenv") (execute-extended-command nil "setenv" "se") (describe-variable 'setenv-history) (switch-to-buffer "dd.org" nil 'force-same-window) (switch-to-buffer "*Org PDF LaTeX Output*" nil 'force-same-window) (switch-to-buffer "dd.org" nil 'force-same-window) (setenv "SHELL" "/bin/zsh" t) (execute-extended-command nil "setenv" "setenv") (switch-to-buffer "*Org PDF LaTeX Output*" nil 'force-same-window) (find-file "~/school/mods/CS6215/notes/project/dd.org" t) (execute-extended-command nil "recentf" "recentf") (recentf "~/.emacs.d/init.el") (execute-extended-command nil "recentf" "recent") (switch-to-buffer "*Org PDF LaTeX Output*" nil 'force-same-window) (describe-variable 'exec-path) (exec-path-from-shell-initialize) (execute-extended-command nil "exec-path-from-shell-initialize" "exec-") (org-indent-mode 'toggle) (execute-extended-command nil "org-indent-mode" "id") (org-indent-mode 'toggle) (execute-extended-command nil "org-indent-mode") (org-indent-mode 'toggle) (execute-extended-command nil "org-indent-mode" "org-indent") (find-file "~/school/mods/CS6215/notes/project/dd.org" t) (grep-find "find . -type f -exec grep --color=auto -nH --null -e ef- \\{\\} +") (execute-extended-command nil "grep-find" "g") (ef-themes-select 'ef-bio) (execute-extended-command nil "ef-themes-select" "ef-themes-select") (ef-themes-select-dark '##) (execute-extended-command nil "ef-themes-select-dark" "ef-themes-select-dark") (describe-variable 'mode-line-modified) (find-file "~/dotfiles/emacs/dot-emacs.d/brian-modules/brian-modeline.el" t) (find-file "~/dotfiles/emacs/dot-emacs.d/brian-modules/brian-modeline" t) (find-file "~/dotfiles/emacs/dot-emacs.d/init.el" t) (describe-variable 'custom-face-all) (ef-themes-load-random nil) (execute-extended-command nil "ef-themes-load-random") (ef-themes-load-random nil) (execute-extended-command nil "ef-themes-load-random") (ef-themes-load-random nil) (execute-extended-command nil "ef-themes-load-random") (ef-themes-load-random nil) (execute-extended-command nil "ef-themes-load-random") (ef-themes-load-random nil) (execute-extended-command nil "ef-themes-load-random") (ef-themes-load-random nil) (execute-extended-command nil "ef-themes-load-random") (ef-themes-load-random nil) (execute-extended-command nil "ef-themes-load-random") (ef-themes-load-random nil) (execute-extended-command nil "ef-themes-load-random") (ef-themes-load-random nil) (execute-extended-command nil "ef-themes-load-random") (ef-themes-load-random nil) (execute-extended-command nil "ef-themes-load-random") (ef-themes-load-random nil) (execute-extended-command nil "ef-themes-load-random") (ef-themes-load-random nil) (execute-extended-command nil "ef-themes-load-random") (ef-themes-load-random nil) (execute-extended-command nil "ef-themes-load-random") (ef-themes-load-random nil) (execute-extended-command nil "ef-themes-load-random") (ef-themes-load-random nil) (execute-extended-command nil "ef-themes-load-random") (ef-themes-load-random nil) (execute-extended-command nil "ef-themes-load-random") (ef-themes-load-random nil) (execute-extended-command nil "ef-themes-load-random") (ef-themes-load-random nil) (execute-extended-command nil "ef-themes-load-random") (ef-themes-load-random nil) (execute-extended-command nil "ef-themes-load-random") (ef-themes-load-random nil) (execute-extended-command nil "ef-themes-load-random") (ef-themes-load-random nil) (execute-extended-command nil "ef-themes-load-random") (ef-themes-load-random nil) (execute-extended-command nil "ef-themes-load-random") (ef-themes-load-random nil) (execute-extended-command nil "ef-themes-load-random" "ef theme ran") (describe-function 'ef-themes-load-random) (grep-find "find . -type f -exec grep --color=auto -nH --null -e ef-cyprus \\{\\} +") (execute-extended-command nil "grep-find" "e") (grep-find "find . -type f -exec grep --color=auto -nH --null -e ef-day \\{\\} +") (execute-extended-command nil "grep-find" "grep find") (describe-function 'company-complete) (switch-to-buffer "brian-eglot.el" nil 'force-same-window) (global-company-mode 'toggle) (execute-extended-command nil "global-company-mode" "global-co") (find-file "~/dotfiles/emacs/dot-emacs.d/brian-modules/brian-eglot.el" t) (find-file "~/dotfiles/emacs/dot-emacs.d/brian-modules/brian-options.el" t) (kill-buffer "*Backtrace*") (kill-buffer "brian-options.el") (switch-to-buffer "brian-options.el" nil 'force-same-window) (switch-to-buffer "*grep*" nil 'force-same-window) (find-file "~/dotfiles/emacs/dot-emacs.d/brian-modules/brian-options.el" t) (switch-to-buffer "*grep*" nil 'force-same-window) (switch-to-buffer "brian-options.el" nil 'force-same-window)))
(setq grep-find-history '("find . -type f -exec grep --color=auto -nH --null -e ef- \\{\\} +" "find . -type f -exec grep --color=auto -nH --null -e ef-cyprus \\{\\} +" "find . -type f -exec grep --color=auto -nH --null -e ef-day \\{\\} +" "find . -type f -exec grep --color=auto -nH --null -e bell \\{\\} +" "find . -type f -exec grep --color=auto -nH --null -e silent \\{\\} +" "find . -type f -exec grep --color=auto -nH --null -e help \\{\\} +"))
(setq buffer-name-history '("dd.org" "*Org PDF LaTeX Output*" "dd.org" "*Org PDF LaTeX Output*" "brian-eglot.el" "*Backtrace*" "brian-options.el" "*grep*" "brian-options.el" "init.el" "brian-options.el" "dd.org" "*Org PDF LaTeX Output*" "ps5" "org-mode+Reveal.js Slides.org" "init.el" "Dijkstra.hs"))
(setq yes-or-no-p-history '("yes"))
(setq file-name-history '("~/school/mods/CS6215/notes/project/dd.org" "~" "~/school/mods/CS6215/notes/project/dd.org" "~/dotfiles/emacs/dot-emacs.d/brian-modules/brian-modeline.el" "~/dotfiles/emacs/dot-emacs.d/brian-modules/brian-modeline" "~/dotfiles/emacs/dot-emacs.d/init.el" "~/dotfiles/emacs/dot-emacs.d/brian-modules/brian-eglot.el" "~/dotfiles/emacs/dot-emacs.d/brian-modules/brian-options.el" "TAGS" "~/dotfiles/emacs/dot-emacs.d/brian-modules/brian-options.el" "~/dotfiles/emacs/dot-emacs.d/brian-modules/" "~/.emacs.d/init.el" "~/dotfiles/emacs/dot-emacs.d/brian-modules/" "~/School/mods/CS6215/notes/project/dd.org" "~/School/mods/CS6215/notes/project/" "~/School/mods/CS6215/notes/project/dd.md" "~/.emacs.d/brian-modules/brian-fonts.el" "~/School/projects/fixed-point/fixed-point/app/" "~/dotfiles/emacs/dot-emacs.d/brian-modules/brian-eglot.el" "~/dotfiles/emacs/dot-emacs.d/init.el" "~/School/projects/fixed-point/fixed-point/src/" "~/dotfiles/emacs/dot-emacs.d/brian-modules/brian-options.el" "~/.emacs.d/init.el" "~/src/stow/INSTALL.md" "~/school/GT/CS2030S-2425-s2/ps5/presentation.md" "~/.emacs.d/brian-modules/brian-reveal.el" "~/school/GT/CS2030S-2425-s2/ps4/presentation.md" "~/school/GT/CS2030S-2425-s2/ps5/presentation.md" "~/.emacs.d/brian-modules/brian-reveal.el" "~/Downloads/org-mode+Reveal.js Slides.org" "~/school/GT/CS2030S-2425-s2/ps5/slides.org" "~/school/GT/CS2030S-2425-s2/ps5/" "~/.emacs.d/brian-modules/brian-reveal.el" "~/.emacs.d/brian-modules/brian-dired.el" "~/.emacs.d/brian-modules/" "~/.emacs.d/brian-modules/brian-options.el" "~/.emacs.d/init.el" "~/school/projects/fixed-point/dijkstra" "~/school/projects/fixed-point/dijkstra/src/Dijkstra.hs" "~/school/projects/fixed-point/dijkstra/src/" "~/.emacs.d/brian-modules/brian-eglot.el" "~/.emacs.d/brian-modules/brian-minibuffer.el" "~/school/projects/fixed-point/dijkstra/src/Dijkstra.hs" "~/.emacs.d/" "~/.emacs.d/brian-modules/" "~/.emacs.d/brian-modules/brian-eglot.el" "~/.emacs.d/brian-modules/brian-options.el" "~/.emacs.d/brian-modules/brian-keyboard-quit-dwim.el" "~/.emacs.d/brian-modules/brian-whichkey.el" "~/.emacs.d/brian-modules/" "~/.emacs.d/" "~/.emacs.d/brian-modules/" "~/.emacs.d/" "~/.emacs.d/brian-modules/brian-modeline.el" "~/.emacs.d/init.el" "~/.emacs.d/brian-modules/brian-modeline.el" "~/.emacs.d/brian-modules/brian-options.el" "~/.emacs.d/brian-modules/brian-minibuffer.el" "~/.emacs.d/init.el" "~/.emacs.d/brian-modules/brian-options.el" "/usr/local/share/emacs/30.1/lisp/loaddefs.el.gz" "~/.emacs.d/brian-modules/brian-dired-subtree.el" "~/.emacs.d/brian-modules/brian-themes-and-icons.el" "~/.emacs.d/brian-modules/brian-fonts.el"))
(setq minibuffer-history '("setenv-history" "~/.emacs.d/init.el" "exec-path" "mode-line-modified" "custom-face-all" "ef-themes-load-random" "company-complete" "~/.emacs.d/init.el" "exec-path" "~/.emacs.d/init.el" "org-reveal-root" "ox-reveal" "ef-day" "ef-bio" "exec-path" "eglot-server-programs" "exec-path" "~/.emacs.d/init.el" "exec-path" "prog-mode" "~/.emacs.d/init.el"))
(setq extended-command-history '("setenv" "recentf" "exec-path-from-shell-initialize" "org-indent-mode" "grep-find" "ef-themes-select" "ef-themes-select-dark" "ef-themes-load-random" "grep-find" "global-company-mode" "grep-find" "dired-goto-file" "recentf" "make-directory" "exec-path-from-shell-initialize" "markdown-mode" "recentf" "load-library" "make-directory" "load-theme" "delete-selection-mode" "eglot-list-connections" "eglot-reconnect" "eglot-menu" "haskell-mode" "recentf" "eglot" "haskell-mode" "eglot" "eglot-server-menu" "eglot" "recentf" "eglot" "recentf" "nerd-icons-install-fonts" "ebrowse-tags-find-declaration-other-frame" "recentf"))
(setq corfu-history 'nil)
